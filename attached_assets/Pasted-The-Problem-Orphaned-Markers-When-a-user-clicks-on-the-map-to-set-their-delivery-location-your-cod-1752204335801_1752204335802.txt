The Problem: Orphaned Markers
When a user clicks on the map to set their delivery location, your code is creating a new marker and placing it on the map. However, when they click a second time to update the location, the code is simply creating another new marker. The original marker is not being told to disappear, resulting in multiple pins cluttering the map.

The Solution: Remove Before You Re-add
To fix this, you need to keep track of the currently displayed marker. When a new location is selected, you must first remove the existing marker and then add the new one. There are two primary ways to achieve this:

Set the Map of the Old Marker to null: This is the most common and recommended approach. You store a reference to the marker when you create it. Before creating a new marker, you check if a marker already exists. If it does, you remove it from the map by calling marker.setMap(null).

Update the Position of the Existing Marker: An alternative is to create a single marker when the map loads and then simply update its position every time the user clicks on a new location using the marker.setPosition() method.

Practical Implementation
Here is a simplified JavaScript code example demonstrating the first and most robust solution. You'll likely need to adapt this to your specific website's code, but the logic remains the same.

Key variables to have in your script:

JavaScript

let map;
let marker; // This will hold the reference to the current marker
Your map initialization and click event listener:

JavaScript

function initMap() {
  // Initialize your map as you normally would
  map = new google.maps.Map(document.getElementById('map'), {
    center: { lat: -34.397, lng: 150.644 }, // Initial center
    zoom: 8,
  });

  // Add a click listener to the map
  map.addListener('click', (event) => {
    // When the map is clicked, call a function to place the marker
    placeMarker(event.latLng);
  });
}

function placeMarker(location) {
  // First, check if a marker already exists
  if (marker) {
    // If it does, remove it from the map
    marker.setMap(null);
  }

  // Create a new marker at the clicked location
  marker = new google.maps.Marker({
    position: location,
    map: map,
  });

  // Here you would also update the latitude and longitude fields in your form
  // for the delivery address.
  // For example:
  // document.getElementById('latitudeInput').value = location.lat();
  // document.getElementById('longitudeInput').value = location.lng();
}
Steps to Integrate the Fix:
Declare a Global Marker Variable: Ensure you have a variable (e.g., let marker;) declared in a scope that is accessible by the function that handles the map clicks.

Modify Your Click Handler: In the function that executes when a user clicks on the map, add the conditional check (if (marker)) to see if a marker already exists.

Remove the Existing Marker: If a marker does exist, call marker.setMap(null); on it before you create the new one.