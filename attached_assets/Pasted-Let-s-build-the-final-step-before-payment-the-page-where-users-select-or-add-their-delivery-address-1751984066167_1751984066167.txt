Let's build the final step before payment: the page where users select or add their delivery address. This functionality should be protected and require a user to be logged in.

Step 1: Create the Address Management Page
When a user clicks the 'Proceed to Checkout' button from their cart, they must be directed to a new, dedicated page for address management.

The Python function that displays this page must be protected by the @login_required decorator.

This function should render a new HTML template. This template must contain two main sections:

A section to display the user's 'Saved Addresses' (you can use placeholders for now).

A form to 'Add a New Address'.

Step 2: Build the 'Add New Address' Form
The new address form within the template must contain input fields for all of the following details. Please mark the mandatory fields clearly for the user.

Nick Name (Mandatory)

Hno/Plot No. (Mandatory)

Building/Community Name

Block Name/No

Floor/Door Number (Mandatory)

Contact Number (Mandatory)

A div with id="map" to hold the interactive Google Map for pinning the location (Mandatory).

Locality (Mandatory)

City (Mandatory)

Nearby Landmark

Any delivery note?

A 'Confirm Address' checkbox (Mandatory).

A final 'Proceed to Pay' button.

Step 3: Integrate Google Maps for Address Pinning
Now, integrate the interactive map functionality into the address form.

First, ensure you have a Google Cloud API key for the 'Maps JavaScript API' and 'Places API', and that it's stored in Replit Secrets as Maps_API_KEY.

In the backend Python function that renders this address page, read the Maps_API_KEY from the secrets and pass it to the HTML template.

In the address page template, add the Google Maps script tag, using the API key passed from the backend.

Write the JavaScript code needed to initialize the map inside the div with id="map". The map must display a draggable marker. When the user repositions this marker, the script should automatically:

Update hidden input fields in the form with the new latitude and longitude.

Use the Places API to attempt to auto-fill the 'Locality' and 'City' form fields based on the marker's new position.